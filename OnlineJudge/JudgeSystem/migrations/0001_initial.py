# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-04-21 13:42
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(max_length=50)),
                ('description', models.TextField(max_length=1000)),
                ('timestamp', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1000)),
                ('timestamp', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('isActive', models.BooleanField()),
                ('contest_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='JudgeUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('WA_Count', models.IntegerField(default=1)),
                ('TLE_Count', models.IntegerField(default=1)),
                ('AC_Count', models.IntegerField(default=1)),
                ('RE_Count', models.IntegerField(default=1)),
                ('CE_Count', models.IntegerField(default=1)),
                ('contrib_pts', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('p_id', models.CharField(max_length=10)),
                ('statement', models.CharField(max_length=2000)),
                ('sample_input', models.CharField(max_length=200, null=True)),
                ('sample_output', models.CharField(max_length=200, null=True)),
                ('comments', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='CommentsOnProblem', to='JudgeSystem.BlogPost')),
                ('contest', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ContestOfProblem', to='JudgeSystem.Contest')),
                ('setter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='SetterOfProblem', to='JudgeSystem.JudgeUser')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('code', models.CharField(max_length=1000)),
                ('penalty', models.IntegerField(default=0)),
                ('solved', models.BooleanField(default=0)),
                ('submission_time', models.DateTimeField()),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('verdict', models.CharField(max_length=100)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='SolutionOfProblem', to='JudgeSystem.Problem')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='judgeuser',
            name='solution_list',
            field=models.ManyToManyField(related_name='SolutionListOfUser', to='JudgeSystem.Solution'),
        ),
        migrations.AddField(
            model_name='contest',
            name='administrator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admintoContest', to='JudgeSystem.JudgeUser'),
        ),
        migrations.AddField(
            model_name='contest',
            name='user_list',
            field=models.ManyToManyField(related_name='ContestToUser', to='JudgeSystem.JudgeUser'),
        ),
        migrations.AddField(
            model_name='comment',
            name='addedby',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentbyUser', to='JudgeSystem.JudgeUser'),
        ),
        migrations.AddField(
            model_name='comment',
            name='blogpost',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentOnBlog', to='JudgeSystem.BlogPost'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='addedby',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='postbyUser', to='JudgeSystem.JudgeUser'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='tags',
            field=models.ManyToManyField(related_name='tagOfPost', to='JudgeSystem.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together=set([('p_id', 'contest')]),
        ),
    ]
